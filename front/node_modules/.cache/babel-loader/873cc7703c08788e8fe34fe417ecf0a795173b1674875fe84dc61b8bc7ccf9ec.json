{"ast":null,"code":"var _jsxFileName = \"/Users/user/PycharmProjects/lab333/front/src/components/auth.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport validator from 'validator';\nimport { DOMEN_SERVER, DOMEN_SITE } from '../../config/const';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Register() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register user:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitChackin,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"username\",\n          id: \"username\",\n          name: \"username\",\n          value: register.usernamr,\n          onChange: changeInputRegister\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          value: register.email,\n          onChange: changeInputRegister,\n          formnovalidate: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Password: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          name: \"password\",\n          value: register.password,\n          onChange: changeInputRegister\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Repeat password: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password2\",\n          name: \"password2\",\n          value: register.password2,\n          onChange: changeInputRegister\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n_c = Register;\nconst [register, setRegister] = useState(() => {\n  return {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\"\n  };\n});\nconst changeInputRegister = event => {\n  event.persist();\n  setRegister(prev => {\n    return {\n      ...prev,\n      [event.target.name]: event.target.value\n    };\n  });\n};\nconst submitChackin = event => {\n  event.preventDefault();\n  if (!validator.isEmail(register.email)) {\n    alert(\"You did not enter email\");\n  } else if (register.password !== register.password2) {\n    alert(\"Repeated password incorrectly\");\n  } else if (!validator.isStrongPassword(register.password, {\n    minSymbols: 0\n  })) {\n    alert(\"Password must consist of one lowercase, uppercase letter and number, at least 8 characters\");\n  } else {\n    axios.post(DOMEN_SERVER + \"/auth/registration/\", {\n      username: register.username,\n      email: register.email,\n      password: register.password\n    }).then(res => {\n      if (res.data === true) {\n        window.location.href = DOMEN_SITE + \"/auth\";\n      } else {\n        alert(\"There is already a user with this email\");\n      }\n    }).catch(() => {\n      alert(\"An error occurred on the server\");\n    });\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","axios","validator","DOMEN_SERVER","DOMEN_SITE","Register","submitChackin","register","usernamr","changeInputRegister","email","password","password2","setRegister","username","event","persist","prev","target","name","value","preventDefault","isEmail","alert","isStrongPassword","minSymbols","post","then","res","data","window","location","href","catch"],"sources":["/Users/user/PycharmProjects/lab333/front/src/components/auth.js"],"sourcesContent":["import React, { useState } from 'react'\nimport axios from 'axios';\nimport validator from 'validator';\nimport { DOMEN_SERVER, DOMEN_SITE } from '../../config/const';\n\n\nexport default function Register () {\n    return (\n    <div className=\"form\">\n        <h2>Register user:</h2>\n        <form onSubmit={submitChackin}>\n            <p>Name: <input\n            type=\"username\"\n            id=\"username\"\n            name=\"username\"\n            value={register.usernamr}\n            onChange={changeInputRegister}\n            /></p>\n            <p>Email: <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={register.email}\n            onChange={changeInputRegister}\n            formnovalidate\n            /></p>\n            <p>Password: <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            value={register.password}\n            onChange={changeInputRegister}\n            /></p>\n            <p>Repeat password: <input\n            type=\"password\"\n            id=\"password2\"\n            name=\"password2\"\n            value={register.password2}\n            onChange={changeInputRegister}\n                /></p>\n            <input type=\"submit\"/>\n        </form>\n    </div>\n)\n}\n\nconst [register, setRegister] = useState(() => {\n    return {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        password2: \"\",\n    }\n})\n\nconst changeInputRegister = event => {\n    event.persist()\n    setRegister(prev => {\n        return {\n            ...prev,\n            [event.target.name]: event.target.value,\n        }\n    })\n}\n\n\nconst submitChackin = event => {\n    event.preventDefault();\n    if(!validator.isEmail(register.email)) {\n        alert(\"You did not enter email\")\n    } else if(register.password !== register.password2) {\n        alert(\"Repeated password incorrectly\")\n    } else if(!validator.isStrongPassword(register.password, {minSymbols: 0})) {\n        alert(\"Password must consist of one lowercase, uppercase letter and number, at least 8 characters\")\n    } else {\n        axios.post(DOMEN_SERVER + \"/auth/registration/\", {\n            username: register.username,\n            email: register.email,\n            password: register.password,\n        }).then(res => {\n            if (res.data === true) {\n                window.location.href = DOMEN_SITE + \"/auth\"\n            } else {\n                alert(\"There is already a user with this email\")\n            }\n        }).catch(() => {\n            alert(\"An error occurred on the server\")\n        })\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}